# code for creating initial list of manifold data

from SnapPea import *
import os, sys, re

# creates a gap record for the manifold
def gap_manifold_record(manifold, group, coverinfo=1):
    o = "rec(\n"
    H = homology(manifold)
    G = fundamental_group(manifold)
    o = o + ' Name := "%s", Volume := "%f", Homology := %s, \n' % (
        repr(manifold), manifold.volume(), H.coefficient_list() )
    if coverinfo:
        o = o + 'KnownPosBettiCover := false, KnownWeakPosBettiCover := false,'
        o = o + 'GoodCover := false, GoodCoverImage := [],  Reason := false,'
        o = o + 'Degree := 0, Rank := 0,\n'
    o = o + "Group:= function()\n"
    G = group
    letters = G.gens()
    o = o + "local F, "
    for i in range(0, len(letters)-1):
        o = o + "%s, %s, " % (letters[i], chr(ord(letters[i]) - 32))
    o = o + "%s, %s; " % (letters[-1], chr(ord(letters[-1]) - 32)) 
    o = o + "F := FreeGroup( "
    for letter in letters[:-1]:
        o = o +  '"' + letter + '", '
    o = o + '"' + letters[-1] + '"); '
    for i in range(0, len(letters)):
        o = o + "%s := F.%d;  %s := F.%s^-1; " % (letters[i], i + 1, chr(ord(letters[i]) - 32) , i +1) 
        
    o = o +  " return F / " 

    t = repr(G.relations())
    t = re.subn("\'", "", t)[0]
    t = re.subn("([a-zA-Z])([a-zA-Z])", lambda m: m.group(1) + "*" + m.group(2), t)[0]
    t = re.subn("([a-zA-Z])([a-zA-Z])", lambda m: m.group(1) + "*" + m.group(2), t)[0]
    o = o + t + ';\nend)'
    return o 

# Below function retriangulates the given manifold until it finds a
# presentatation for pi_1 with <= 2 generators.  Returns the "best"
# triangulation it finds in the following sense.  If the initial
# presentation has 2-generators, it uses that one.  If no presentation
# has 2-generators, then it also uses the initial one.  The original
# triangulation is not modified.

def find_pres_with_2_generators(manifold, max_trys=20):
    M = copy_triangulation(manifold)
    for i in range(max_trys):
        G = fundamental_group(M)
        if G.num_gens() <= 2:
            return G
        else:
            randomize_triangulation(M)

    return fundamental_group(manifold)


def create_data( censuses , cover_data):
    print "return ["
    begin = 1
    for census in censuses:
        for manifold in census():
            if begin:
                begin = 0
            else:
                print " , "

            G = find_pres_with_2_generators(manifold, 100)
            print gap_manifold_record(manifold, G, cover_data)

    print "];"



if __name__ == "__main__":
    create_data([oriented_five_census, oriented_six_census,
                 oriented_seven_census], 0)



